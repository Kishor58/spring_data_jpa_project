üî∂ What is JPA (Java Persistence API)?
JPA is a specification (a set of rules) for storing, updating, and managing data in a database using Java objects.

It‚Äôs like a rulebook that says:

--->‚ÄúThis is how Java classes can become database tables.‚Äù

--->‚ÄúThis is how to fetch or save them.‚Äù

--->But JPA is just a set of rules ‚Äî it doesn‚Äôt actually do the work.

üî∂ What is Hibernate?
Hibernate is an actual implementation of the JPA specification.
It does the real work of:

Converting Java objects into database tables and rows

Generating SQL queries (e.g., INSERT, SELECT, UPDATE)

Fetching and saving data

‚û°Ô∏è So, JPA defines rules, and Hibernate follows those rules and does the work.

Spring Boot uses Hibernate by default when you use Spring Data JPA.

üî∂ What is Spring Data JPA?
Spring Data JPA is a part of Spring Boot that:

Connects your code to the database

Lets you use repositories to talk to the database

Hides all the SQL ‚Äî you don‚Äôt need to write SELECT, INSERT, etc. manually

üî∑ Example: The Flow
Let‚Äôs say you have a Student class:
@Entity
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;
}

You can now save and retrieve Student objects using a Repository without writing SQL.

üî∂ Key Components in Spring Data JPA
Concept	Explanation

@Entity	Tells Spring: this class should be mapped to a database table

@Id	                  Marks the primary key

@GeneratedValue	      Auto-generates the ID

JpaRepository	      Gives you ready-made methods like save(), findAll()

@Transactional        Ensures that DB operations are safe and rollback if errors occur

**********************************************************************************************************
Annotation	Purpose

@Id	                           Marks the field as Primary Key
@GeneratedValue	               Lets DB auto-generate values for the ID
GenerationType.IDENTITY	        Best for auto-incrementing in MySQL/PostgreSQL

1. @OneToMany
Meaning: This annotation defines a one-to-many relationship between two entities, where one entity (the "one" side)
         can be associated with many instances of another entity (the "many" side).
Purpose: Used to represent that an entity has a collection of related entities.

Example Use Case: A Department has many Employees.

2. @ManyToOne
Meaning: This annotation defines the inverse of a one-to-many relationship. It indicates that many instances of an
          entity (the "many" side) can belong to one instance of another entity (the "one" side).

Purpose: It‚Äôs used when the child entity needs to refer back to the parent entity.

Example Use Case: Many Employees belong to one Department.

3. @OneToOne
Meaning: This annotation defines a one-to-one relationship between two entities, where each entity is associated with
         exactly one instance of the other.

Purpose: Used when each instance of an entity is uniquely related to one instance of another entity.

Example Use Case: A Person has one Passport.

4. @ManyToMany
Meaning: This annotation defines a many-to-many relationship between two entities, where multiple instances of one
         entity can be associated with multiple instances of the other.

Purpose: It is used when both entities can have many related instances to each other.

Example Use Case: A Student enrolls in many Courses, and each Course has many Students.

5. @JoinColumn
Meaning: This annotation specifies the column in the database that will be used as the foreign key to link two
         entities in a relationship.

Purpose: It‚Äôs used to define the relationship at the database level by indicating the column that contains the foreign key.

Example Use Case: In a ManyToOne or OneToOne relationship, it is used to define which column will hold the
                  foreign key (e.g., department_id in the Employee table).

6. mappedBy
Meaning: This attribute is used in bidirectional relationships to indicate that the relationship is already managed on
         the other side of the relationship.

Purpose: It tells JPA that the ownership of the relationship is on the other side (the inverse side).
         The field specified in mappedBy refers to the corresponding attribute in the other entity.

Example Use Case: In a bidirectional OneToMany relationship, the "many" side (child) owns the relationship,
                   and the "one" side (parent) specifies the mappedBy attribute.

**********************************************************************************************************************

1) @Query in Spring Data JPA
The @Query annotation is used when:

You want to write custom queries manually

Spring‚Äôs method naming (findByName, etc.) is not enough

You can use either JPQL or Native SQL

 1.1 JPQL (Java Persistence Query Language)
üìå What is it?
JPQL is similar to SQL, but it uses entity class names and field names, not table or column names.

It‚Äôs database-independent and works with JPA entities.

‚úÖ Example:
@Query("SELECT e FROM Employee e WHERE e.name = :name")
List<Employee> getByName(@Param("name") String name);
Employee ‚Üí Entity class name (not table)

e.name ‚Üí Java field (not database column)

‚úÖ Features:
Supports joins, sorting, conditions, etc.
You can use positional (?) or named (:param) parameters

Safe and recommended for most use cases

üîπ Native Queries
üìå What is it?
Native queries use real SQL, just like you'd write in a SQL client.

You must tell Spring it's a native query using nativeQuery = true.

‚úÖ Example:
@Query(value = "SELECT * FROM employees WHERE name = ?1", nativeQuery = true)
List<Employee> getByName(String name);
employees ‚Üí actual table name in the DB

?1 ‚Üí first method parameter

‚úÖ Features:
Useful when:

You need SQL features not available in JPQL

You want performance optimizations

You use database-specific syntax

************************************************************************************************

FetchType.LAZY (default for @OneToMany):

Definition: LAZY means that the related entities (Book in this case) will not be loaded when you load the Author entity. Instead, they will be loaded only when they are explicitly accessed (for example, when you access the book list in the Author object).

Usage: This is the default behavior for @OneToMany associations. It helps to improve performance by not loading related entities unless you specifically need them. This can be particularly useful when working with large datasets to avoid unnecessary database queries.

Example (LAZY loading):

@OneToMany(mappedBy = "author", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
private List<Book> books;
In the example above, the books list will not be loaded immediately when you load an Author. Instead, it will be loaded lazily when you access the books list.

Implication: The first time you access the books list, a separate query will be executed to fetch the related books from the database.

FetchType.EAGER:

Definition: EAGER means that the related entities (Book) will always be loaded immediately along with the parent entity (Author) in the same query. This is useful when you always want to retrieve the related entities with the parent entity.

Usage: You should use EAGER fetching when you know you will need the related entities, and you want them loaded right away. However, be cautious as this can lead to performance issues if you have large sets of related entities.

Example (EAGER loading):

@OneToMany(mappedBy = "author", cascade = CascadeType.ALL, fetch = FetchType.EAGER)
private List<Book> books;
In this case, every time you load an Author, the books list will be retrieved in the same query, and there will be no additional queries when accessing the books list.

Implication: The books will be fetched eagerly, leading to a more expensive initial query, especially if there are many books related to the author.

When to Use Each Fetch Type:
Use FetchType.LAZY:

When you have a large dataset or when you don‚Äôt need to access the related entities immediately.

It improves performance and avoids unnecessary queries by loading the related entities only when needed.

Most common use case, as it allows lazy loading and avoids the "N+1 query problem" (which happens when multiple queries
are made when accessing related entities).

Use FetchType.EAGER:

When you know you will always need the related entities right away and want them loaded with the parent entity.

Useful in smaller datasets or when the number of related entities is manageable, and you don‚Äôt mind loading them all at once.

************************************************************************************************************************

1. Pagination and Sorting:
Pagination and sorting are essential for working with large datasets in web applications. When you need to fetch data from the database in chunks or with a specific order, you can use pagination and sorting techniques to optimize performance and user experience.

Pagination: Breaks a large set of data into smaller, manageable chunks. This is especially useful when displaying large datasets on the UI (e.g., a list of books, authors, etc.).

Sorting: Allows you to order the data based on a field (e.g., sorting books by title, price, or author). Sorting can be done in ascending or descending order.

In Spring Data JPA:

Pagination can be implemented using Pageable and Page classes.

Sorting can be achieved using Sort class.

How to use pagination and sorting:
Repository Layer:

In the Repository interface, extend PagingAndSortingRepository or JpaRepository, which provides methods like findAll(Pageable pageable).

Controller Layer:

Pass Pageable and Sort parameters to the service layer when making requests.

************************************************************************************************************************

2. Transactions using @Transactional:
In Spring, @Transactional is used to manage database transactions. A transaction is a sequence of operations performed as a single unit. This ensures that all operations either succeed or fail together, maintaining data integrity.

Why use @Transactional:
It ensures atomicity, consistency, isolation, and durability (ACID properties).

You can manage complex business logic where multiple database operations should be treated as a single transaction (i.e., either all succeed, or if one fails, none are persisted).

How to use @Transactional:
Annotate Methods or Classes: You can annotate individual methods or entire classes with @Transactional.

By default, @Transactional will roll back on unchecked exceptions (i.e., RuntimeException and Error).

Example:
Service Layer with @Transactional:

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class BookService {
    @Transactional
    public void addBookAndAuthor(Book book, Author author) {
        authorRepository.save(author); // Saving author
        bookRepository.save(book);     // Saving book
    }
}

************************************************************************************************************************


//In this topic i have doubt how it's working and how can we implement this and why it required ?

3. Flyway or Liquibase DB Migrations:
Database Migrations are essential for versioning the database schema over time.
Both Flyway and Liquibase are tools used to manage database migrations in a consistent and automated way, especially when dealing with evolving databases in different environments (development, testing, production).

Flyway: A database migration tool that uses versioned SQL scripts or Java classes for migration.

Liquibase: Similar to Flyway, but uses XML, YAML, JSON, or SQL files for migrations.

How to Use Flyway:
Add Flyway Dependency:

If you haven‚Äôt already added Flyway, you can do so by adding the dependency in your pom.xml:

<dependency>
    <groupId>org.flywaydb</groupId>
    <artifactId>flyway-core</artifactId>
</dependency>
Create Migration Scripts:

Flyway uses SQL scripts to manage database changes. The naming convention for migration scripts is: V{version_number}__{description}.sql.

For example, V1__Create_books_table.sql.

-- V1__Create_books_table.sql
CREATE TABLE books (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author_id BIGINT,
    FOREIGN KEY (author_id) REFERENCES authors(id)
);
