🔐 How BCrypt Password Encryption Works in Spring Boot
🧠 1. What is BCrypt?
BCrypt is a password hashing function, not encryption.

It uses a one-way hash algorithm, meaning:
👉 You can generate a hash from a password,
❌ But you can't reverse it to get the original password.
_________________________________________________________________

🔄 2. What Changes When You Use BCrypt?
| Step           | Without BCrypt                | With BCrypt (Safe)                                |
| -------------- | ----------------------------- | ------------------------------------------------- |
| Register/Login | Password saved in plain text  | Password saved as a **secure, irreversible hash** |
| Login checking | Direct `password.equals(...)` | Use `BCrypt.matches(raw, hashed)` to compare      |
| Security risk  | High                          | Very low, even if DB is compromised               |
-------------------------------------------------------------------------------------------------------

________________________________________________________________________________________________________
🔑 What is BCrypt?
BCrypt is a hashing algorithm used for password storage.

Unlike encryption, where data can be reversed (decrypted) back to its original form, hashing is one-way.
This means that once a password is hashed, it can't be converted back to the original password.
This is perfect for password storage because even if someone gains access to your database,
they can't easily get the users' real passwords.

🛡️ Why Use BCrypt?
One-way hashing: Once a password is hashed, you can't get back the original password from it.

Salting: BCrypt adds a random string (called a salt) to each password before hashing. This ensures that even if two users have the same password, their hashed passwords will look completely different.

Work factor: BCrypt allows you to increase the difficulty of hashing passwords, making it harder for attackers to crack them. This is done by increasing the number of rounds or iterations used in the hashing process.

compromised

🧪 3. What Actually Happens?
🔐 During Registration:
Suppose the user enters password123.

BCryptPasswordEncoder.encode("password123") generates a hash like:

$2a$10$T1hUOJykdPdDbO3W7xY0BOCz6lkew7I7WR/UvMfZ8rV8U.XkpV.tG

This hash is saved in the database (not the plain text).


🔍 During Login:
The user again enters password123.

You don’t decrypt the DB hash!

Instead, you use:passwordEncoder.matches("password123", storedHashedPassword)


🛡️ 4. Why It’s Safe?
Each hash is unique even for the same password (due to a random salt).

E.g., password123 hashed twice might look like:$2a$10$abc123...  // First time
                                               $2a$10$xyz456...  // Second time

