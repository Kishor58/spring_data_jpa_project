üîê How BCrypt Password Encryption Works in Spring Boot
üß† 1. What is BCrypt?
BCrypt is a password hashing function, not encryption.

It uses a one-way hash algorithm, meaning:
üëâ You can generate a hash from a password,
‚ùå But you can't reverse it to get the original password.
_________________________________________________________________

üîÑ 2. What Changes When You Use BCrypt?
| Step           | Without BCrypt                | With BCrypt (Safe)                                |
| -------------- | ----------------------------- | ------------------------------------------------- |
| Register/Login | Password saved in plain text  | Password saved as a **secure, irreversible hash** |
| Login checking | Direct `password.equals(...)` | Use `BCrypt.matches(raw, hashed)` to compare      |
| Security risk  | High                          | Very low, even if DB is compromised               |
-------------------------------------------------------------------------------------------------------

________________________________________________________________________________________________________
üîë What is BCrypt?
BCrypt is a hashing algorithm used for password storage.

Unlike encryption, where data can be reversed (decrypted) back to its original form, hashing is one-way.
This means that once a password is hashed, it can't be converted back to the original password.
This is perfect for password storage because even if someone gains access to your database,
they can't easily get the users' real passwords.

üõ°Ô∏è Why Use BCrypt?
One-way hashing: Once a password is hashed, you can't get back the original password from it.

Salting: BCrypt adds a random string (called a salt) to each password before hashing. This ensures that even if two users have the same password, their hashed passwords will look completely different.

Work factor: BCrypt allows you to increase the difficulty of hashing passwords, making it harder for attackers to crack them. This is done by increasing the number of rounds or iterations used in the hashing process.

compromised

üß™ 3. What Actually Happens?
üîê During Registration:
Suppose the user enters password123.

BCryptPasswordEncoder.encode("password123") generates a hash like:

$2a$10$T1hUOJykdPdDbO3W7xY0BOCz6lkew7I7WR/UvMfZ8rV8U.XkpV.tG

This hash is saved in the database (not the plain text).


üîç During Login:
The user again enters password123.

You don‚Äôt decrypt the DB hash!

Instead, you use:passwordEncoder.matches("password123", storedHashedPassword)


üõ°Ô∏è 4. Why It‚Äôs Safe?
Each hash is unique even for the same password (due to a random salt).

E.g., password123 hashed twice might look like:$2a$10$abc123...  // First time
                                               $2a$10$xyz456...  // Second time

------------------------------------------------------------------------------------------------------
üìñ How Does BCrypt Work?
Let's walk through the BCrypt hashing process in detail:

1. Salting:
A salt is a random string of characters added to the password before it‚Äôs hashed.

Salting makes it harder for attackers to crack hashed passwords using methods like rainbow tables (precomputed lists of hashes).

2. Hashing:
Once the password and salt are combined, the result goes through the BCrypt hashing function.

The hash is calculated multiple times (usually 10 rounds, but this can be adjusted).

3. Storing the Hash:
The result is a hashed password that is stored in the database, along with the salt (so it can be used during login).

Example of a hashed password: $2a$10$T1hUOJykdPdDbO3W7xY0BOCz6lkew7I7WR/UvMfZ8rV8U.XkpV.tG
                              The "$2a$10$" part indicates that this is a BCrypt hash and it's hashed with 10 rounds.

4. During Login:
When a user logs in, we don‚Äôt check the password directly.

Instead, we hash the entered password using the same salt and check if it matches the hash stored in the database.

This means we never store the real password anywhere.

------------------------------------------------------------------------------------------------

üîÑ BCrypt in Action (Step-by-Step)
1. User Registration (Hashing the Password)
Let‚Äôs say a user signs up with the password password123. Here‚Äôs what happens:

The password123 string is first combined with a random salt.

It is then hashed using the BCrypt algorithm multiple times (say, 10 rounds).

This results in a unique hash, such as:$2a$10$T1hUOJykdPdDbO3W7xY0BOCz6lkew7I7WR/UvMfZ8rV8U.XkpV.tG

2. User Login (Checking the Password)
Now, when the user logs in:

The password password123 is entered again.

The system takes the entered password, hashes it using the same salt that was used during registration.

The result is compared to the hash stored in the database.

If they match, the login is successful. If they don't match, the login fails. We never decrypt the hash.

---------------------------------------------------------------------------------------------------------
üõ†Ô∏è How to Use BCrypt in Your Spring Boot Application
Let's implement BCrypt in your Spring Boot application.

1. Add Dependency (Spring Security)
You need to add Spring Security dependency to your project for BCrypt.

If you're using Maven, add this to your pom.xml:
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>


2. Define the PasswordEncoder Bean
Next, define a PasswordEncoder bean that will use BCrypt to encode and verify passwords.

In your SecurityConfig or AppConfig class, add:

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(); // default strength = 10
    }
}

-------------------------------------------------------------------------------------------

üîê Main Class: BCryptPasswordEncoder
Package: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder

Implements Interface: org.springframework.security.crypto.password.PasswordEncoder

üîß Key Methods in BCryptPasswordEncoder

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Method Signature                                                    | Defined In              | Description                                                                                |
| ------------------------------------------------------------------- | ----------------------- | ------------------------------------------------------------------------------------------ |
| `String encode(CharSequence rawPassword)`                           | `BCryptPasswordEncoder` | Hashes the plain text password using BCrypt.                                               |
| `boolean matches(CharSequence rawPassword, String encodedPassword)` | `BCryptPasswordEncoder` | Verifies the raw password against the encoded (hashed) password.                           |
| `boolean upgradeEncoding(String encodedPassword)`                   | `BCryptPasswordEncoder` | Checks if the encoded password‚Äôs strength (work factor) is less than the current strength. |
| `BCryptPasswordEncoder()`                                           | Constructor             | Uses default strength of 10.                                                               |
| `BCryptPasswordEncoder(int strength)`                               | Constructor             | Sets the custom strength (log rounds, e.g., 12).                                           |
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

‚úÖ Method Details
1. encode(CharSequence rawPassword)
üìç Location: BCryptPasswordEncoder

üîÑ Purpose: Hashes the raw password using a generated salt.

üîê Example:String hash = passwordEncoder.encode("secret123");

Internally uses:

BCrypt.gensalt(strength) ‚Äì generates a random salt with defined strength.
BCrypt.hashpw(rawPassword, salt) ‚Äì hashes password using the generated salt.

2. matches(CharSequence rawPassword, String encodedPassword)
üìç Location: BCryptPasswordEncoder

üîÑ Purpose: Compares raw password with stored hash.

üîê Example:passwordEncoder.matches("secret123", hashedPassword);

Internally uses: BCrypt.checkpw(rawPassword, encodedPassword) ‚Äì verifies match.

3. upgradeEncoding(String encodedPassword)
üìç Location: BCryptPasswordEncoder

üîÑ Purpose: Checks if the existing hash uses a lower work factor than current settings.

‚úÖ Useful for: Password upgrade logic.

üîê Example: if (passwordEncoder.upgradeEncoding(storedPassword)) {
               // re-hash the password with higher strength
           }
üîç Internal BCrypt Static Utility Methods (from org.springframework.security.crypto.bcrypt.BCrypt)

Spring uses an internal class called BCrypt (from spring-security-crypto module) that provides these static methods:
| Method                                             | Description                                     |
| -------------------------------------------------- | ----------------------------------------------- |
| `String hashpw(String password, String salt)`      | Performs the actual hashing                     |
| `String gensalt()`                                 | Generates a salt using default log\_rounds (10) |
| `String gensalt(int log_rounds)`                   | Generates a salt with specific strength         |
| `boolean checkpw(String plaintext, String hashed)` | Compares the raw and hashed passwords           |
---------------------------------------------------------------------------------------------------------

PasswordEncoder Implementation in Spring Security
What is PasswordEncoder?

PasswordEncoder is an interface in Spring Security that provides methods for encoding and verifying passwords.

It abstracts away the details of how passwords are stored (e.g., hashing algorithms like bcrypt, PBKDF2, etc.) and ensures consistent handling of passwords.

Why Use PasswordEncoder?

Security best practices dictate that passwords should never be stored in plaintext.

PasswordEncoder ensures passwords are securely hashed before storage and helps verify that entered passwords match stored hashes.

Spring Security provides various implementations of PasswordEncoder, including BCryptPasswordEncoder, NoOpPasswordEncoder, and others.

How to Implement PasswordEncoder?

In a typical Spring Boot application, you would configure PasswordEncoder as a Spring Bean.

For bcrypt, which is commonly used for password hashing, the implementation is BCryptPasswordEncoder.

Steps to Implement PasswordEncoder:

Step 1: Add Dependency (if not already added)
In your pom.xml (Maven), make sure you have the Spring Security dependency:
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
--------
Step 2: Create a Configuration Class for PasswordEncoder
You need to create a configuration class that will define the PasswordEncoder bean.

Example:
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();  // Default strength = 10
    }
}
Explanation:

BCryptPasswordEncoder() is used to encode passwords using the bcrypt hashing algorithm.

You can customize the strength (the computational cost) of bcrypt by passing a parameter
to the constructor (e.g., new BCryptPasswordEncoder(12) for a stronger hashing).
------
Step 3: Inject PasswordEncoder in Your Service Layer

Instead of directly depending on BCryptPasswordEncoder, inject PasswordEncoder into your service class.

Example:
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    private final PasswordEncoder passwordEncoder;

    // Constructor injection of PasswordEncoder
    public UserService(PasswordEncoder passwordEncoder) {
        this.passwordEncoder = passwordEncoder;
    }

    //Your operations........

}

Explanation:
By injecting PasswordEncoder instead of BCryptPasswordEncoder, your code becomes flexible and easier to maintain.
    In the future, if you decide to change your encoding mechanism, you only need to change the bean
    configuration without affecting the business logic.

-----
Step 4: Use PasswordEncoder for Password Verification
When verifying passwords, use the matches() method to compare the raw password with the encoded password.

Example:
public boolean verifyPassword(String rawPassword, String encodedPassword) {
    return passwordEncoder.matches(rawPassword, encodedPassword);
}
-------
Best Practices:

Always Inject the Interface: As demonstrated above, inject PasswordEncoder (interface) instead of concrete
implementations like BCryptPasswordEncoder to ensure loose coupling.

Use Proper Strength for BCrypt: The default strength for BCryptPasswordEncoder is 10. Consider using a higher
strength (12 or higher) based on your application‚Äôs security needs, but keep in mind that higher strength will increase computational time.

Store Only Encoded Passwords: Never store raw passwords in your database. Always store the encoded version of passwords.

Keep Your Dependencies Updated: Regularly update Spring Security and its dependencies to ensure you‚Äôre using
the latest security features and patches.


